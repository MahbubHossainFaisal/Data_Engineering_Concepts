Act as a top tech company AI Engineering Lead who also teaches AI Engineering.
You will teach me about Fast API. I will provide you points that you need to discuss. Please discuss those with great details.
Explain them like as you are more a story teller who teaches people with great storyline by giving proper scenarios and solutions to those scenarios based on the topic.
Please follow the below rules while replying to my questions. 
**Rules**:
	- You have to cover the fundamentals
	- You have to go in detail
	- If I didn't add any important topic in my list of topics, also add that details in your response. 
	- Add questions that are must needed to be interview ready. (But don't mention interview in title) 
	- Properly validate and verify your response, nothing important should be missed from the discussion.
	- Add proper examples where things are complicated to understand to make things easy.
	- Remember you are a teacher! So each step of your response should be like proper way of teaching! Apply the best way to teach! 
	- If the points are unorganized. Please make them organized and explain step by step.
	- Teach me like I am a noob student who need great in detail explanation of things.
	- Please be intelligent enough to make things easier to understand with proper case scenario and example.
	- I want more elaborated, real case scenario example with story based approach to make things easier to grab into memory and learn in a fun way.
	
at last, your goal would be to provide detail in such a way that would clear my fundamentals in Fast API perspective. 

When you are ready, ask me for the topics!

- API
	1st part
	- What is API in Software application perspective?
	- What is API in Machine Learning perspective? How APIs gets fit into ML and AI?
	- API connects frontend with Backend using a defined set of rules, protocols and data formats. 
	- What is the purpose and need of API? 
	- What if API doesn't exist? What issues could be seen? 
	- What business problems API solves? 
	- Without APIs frontend and backend would be tightly coupled [Monolithic Architecture]
	
	2nd part
	- Explain API in the scenario of a restaurant with a proper detailed diagram.
	- Explain the entire API process with proper description and lastly a diagram.
	- What protocols do we follow while requesting to an API?
	- Why API sends response in JSON format? Explain the actual reasons in detail.
	- How API resolved the issue of having different apps creation for different Platform(Android,IOS,Windows) which is decoupling architecture with APIs.
	
	3rd Part
	- Explain the ML Application in API perspective ( Frontend -> Backend -> LLM )
	- How Monolithic architecture in terms of ML perspective have the same issue like Software perspective and how APIs solved this problem? (Frontend -> API -> Backend -> LLM)
	- How API resolved the issue of having different LLM apps creation for different Platform(Android,IOS,Windows) which is decoupling architecture with APIs.
	
	
- Fast API part 01
	- What is FAST API?
	- What is the role of Starlette and Pydantic on Fast API? What is their work and how they do it? Explain with a real case scenario example.
	- What was the Objective of making Fast API as already there were other existing API frameworks?
	- philosophy of Fast API 
		- Fast to run
		- Fast to code
	- Why fast api is fast to run? What concept made it run faster than other existing frameworks?
		- SGI
			- What is it?
			- Purpose?
			- Problem it solve?
			- When required?
			- SGI works when sending http request to api and when api sends back respone in both way. 
			- Different between WSGI vs ASGI. Explain their usecases, pros and cons with a real case scenario.
			- What is the most important Feature  that ASGI have which WSGI don't have.
			- After detailed explanation, provide a proper diagram flow to describe what SGI does.
	- What made FAST API better than Flask? Explain in great details.
	- What web servers used in Flask and in FAST API? Show their differences in details. (Uvicorn vs Gunicorn)
		
- HTTP methods in FAST API
	- Software based on user interaction
		- Static (for example, a calender app/ a clock app)
		- Dynamic (for example, Microsoft Excel)
		
	- How many types of interaction with a dynamic software
		- CRUD
			- CREATE
			- Retrieve 
			- Update
			- Delete
			
	- Explain about server and client as per website concept
	- HTTP is the protocol to communicate between client and serve and viseversa 
	- HTTP Methods.
		- GET request
		- POST request
		- PUT request
		- DELETE request
	

- Path and Query Params:
	 - What is path parameter
		- Purpose
		- What it does
		- How it does
		- Show a real case scenario where it is used.
		- What path() function of path parameter can do? Explain all the scenarios in detail.
		
	- HTTP status codes
		- Explain all the important HTTP status code in details with proper example like what they mean, when they occur and such like that.
	- HTTP_Exception
		- Explain about it in details and real case scenario where we would need to use it.
		
	- Query Parameter:
		- What is it?
		- What is the purpose of it?
		- When is it needed?
		- What operations we can perform through this?
		- What query() utility function in fast API can do? Explain with a proper real scenario.
		- Difference between path() vs query() functions.
		
	- Pydantic
		- What is it?
		- What is the purpose of it?
		- What operations we can perform through this?
		- When is it needed?
		- What 2 main problems pydantic solves?
			- Type validation
			- Data Validation
		- Build a pydantic model example like below:
			- Create a class patient inherits basemodel
				- Define a schema under there -> name str, age str
				- Create an object of the pydantic class and pass a dictionary to that class through this object
				- create a function to use that class.
				
	- Pydantic part 02
		- Every field you define under pydantic class, are by default required.
		- We can make a field optional also by using type Optional.
		- We can use some shortcut data validator like
			- EmailStr
			- AnyURL
		- Explain "Field" from pydantic
			- Cover all the important parameters and aspects where "Field" would be useful to use.
			- How to attach metadata in "Field"
			- Explain about "Strict" parameter under field. What is the purpose of it?
		- Field validator	
			- What is it?
			- What is the purpose of it?
			- What operations we can perform through this?
			- Show different example real case scenarios where we can use field_validator! E.g, For custom validation or data transformation.
			- There are two modes in field validator which is related to type coercion
				- Before mode
				- After mode (by default)
		
		- Model validator	
			- What is it?
			- What is the purpose of it?
			- What operations we can perform through this?
			- What problem model validator solves which Field_Validator can't solve?
			- There are also modes in model validator. Explain in details about their usecase.
			- Show different example real case scenarios where we can use Model_validator! E.g, For custom validation or data transformation.
			
		- Computed Field
			- What is it?
			- What is the purpose of it?
			- What operations we can perform through this?
			- Show different example real case scenarios where we can use Model_validator! E.g, For custom validation or data transformation.
			
		- Nested Models
			- What is it?
			- What is the purpose of it?
			- What operations we can perform through this?
			- Show different example real case scenarios where we can use Model_validator! E.g, For custom validation or data transformation.
			- Benefits of nested models
				- Better organized
				- Reusability
				- Readability
				- Validation
				
		- Exporting Pydantic models
			- Show the various ways using which we can export pydantic models.
				-  model_dump()
				- model_dump_json()
				- Also discuss different important mostly used parameters under dump() or dump_json()
				- Explain exclude_unset() under model_dump()
				