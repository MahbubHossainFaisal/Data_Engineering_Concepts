Metadata-Version: 2.1
Name: data-toolkit
Version: 0.1.0
Summary: A toolkit for data loading, validation, transformation, and visualization
Home-page: https://github.com/MahbubHossainFaisal/Data_Engineering_Concepts/tree/main/Python_Package_Practice
Author: Mahbub Hossain Faisal
Author-email: mahbbubhossain249@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# Data Toolkit

## Data Loading Module

### Supported File Formats
- CSV
- JSON
- Excel

### Usage

```python
from data_toolkit.data_loader import load_csv, load_json, load_excel

# Load CSV
data_csv = load_csv('path/to/file.csv')

# Load JSON
data_json = load_json('path/to/file.json')

# Load Excel
data_excel = load_excel('path/to/file.xlsx', sheet_name='Sheet1')


## Data Validation Module

### Supported Validation Checks
- Missing values
- Data type mismatches
- Duplicates
- Custom validation rules (e.g., value ranges, regex patterns)

### Usage

```python
from data_toolkit.data_validator import generate_detailed_report, check_value_range, check_pattern

# Load your data
data = load_csv('path/to/file.csv')

# Define expected data types
expected_types = {'name': 'object', 'age': 'float64', 'email': 'object'}

## Data Transformation Module

### Supported Transformations
- Fill missing values (mean, median, mode, drop)
- Normalize data
- Standardize data
- Encode categorical variables
- Apply custom transformations
- Create transformation pipelines

### Usage

```python
from data_toolkit.data_transformer import (
    fill_missing_values, normalize_data, standardize_data,
    encode_categorical, apply_transformations
)

# Load your data
data = load_csv('path/to/file.csv')

# Fill missing values
data = fill_missing_values(data, strategy='mean', columns=['age'])

# Normalize data
data = normalize_data(data, columns=['income'])

# Encode categorical variables
data = encode_categorical(data, columns=['city'])

# Apply multiple transformations
transformations = [
    lambda df: fill_missing_values(df, strategy='median'),
    lambda df: standardize_data(df, columns=['age', 'income']),
    lambda df: encode_categorical(df, columns=['city'])
]
data = apply_transformations(data, transformations)


## Data Visualization Module

### Supported Visualizations
- Bar Chart
- Line Chart
- Histogram
- Scatter Plot
- Heatmap

### Usage

```python
from data_toolkit.data_visualizer import (
    plot_bar_chart, plot_line_chart, plot_histogram, plot_scatter_plot, plot_heatmap
)

# Load your data
data = load_csv('path/to/file.csv')

# Plot a bar chart
plot_bar_chart(data, x_column='category', y_column='value', title='Category vs Value', color='green')

# Plot a line chart
plot_line_chart(data, x_column='date', y_column='sales', title='Sales Over Time')

# Plot a histogram
plot_histogram(data, column='age', title='Age Distribution', bins=20)

# Plot a scatter plot
plot_scatter_plot(data, x_column='height', y_column='weight', title='Height vs Weight')

# Plot a heatmap
plot_heatmap(data, title='Correlation Heatmap')
